

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshToken String?
  reservations Reservation[] 
}

model Reservation {
  id            String   @id @default(uuid())
  customer      User     @relation(fields: [customerId], references: [id])
  customerId    String
  room          Room?    @relation(fields: [roomId], references: [id])
  roomId        String?  // Now optional for travel company reservations
  checkInDate   DateTime
  checkOutDate  DateTime
  status        ReservationStatus @default(PENDING)
  occupants     Int
  numberOfRooms Int? // For travel company group bookings
  creditCard    String? // nullable if not provided
  creditCardExpiry String? // nullable if not provided
  creditCardCVV String? // nullable if not provided
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  billingRecord BillingRecord?
}

model Room {
  id           String   @id @default(uuid())
  number       String   @unique
  roomCategory RoomCategory @relation(fields: [roomCategoryId], references: [id])
  roomCategoryId String
  status       RoomStatus @default(AVAILABLE)
  reservations Reservation[]
}

model BillingRecord {
  id             String   @id @default(uuid())
  reservation    Reservation @relation(fields: [reservationId], references: [id])
  reservationId  String   @unique // Make this unique for 1-1 relation
  amount         Float
  paymentMethod  PaymentMethod
  createdAt      DateTime @default(now())
}

// New Model for Room Categories
model RoomCategory {
  id          String  @id @default(uuid())
  name        String  @unique // e.g., STANDARD, DELUXE, SUITE, RESIDENTIAL_SUITE
  description String?
  amenities  String[]
  image      String? 
  idealFor    String?
  capacity    Int?
  size        String? // e.g., "20sqm",  "300 sq ft"
  bed         String? // e.g., "King", "Queen", "2 Singles"
  view        String? // e.g., "City View", "Ocean View"
  priceTier   String? // e.g., "Budget", "Mid-Range", "Luxury"
  price       Float   // Base price for this category
  rooms       Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  CUSTOMER
  CLERK
  MANAGER
  TRAVEL_COMPANY
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  NO_SHOW
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  COMPANY
}



